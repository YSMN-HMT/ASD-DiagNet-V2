#**********************************************************************
# Train, evaluate and test the Net, check the accuracy and the result.
#**********************************************************************
import keras
import array as arr
tf.keras.backend.set_floatx('float64')
from matplotlib import pyplot as plt

if p_Method == "ASD-DiagNet" and p_mode == "whole":

    num_corr = len(all_corr[flist[0]][0])
    print("num_corr:  ",num_corr)
    
    start =time.time()
    batch_size = 8

    learning_rate_ae, learning_rate_clf = 0.0001, 0.0001
    num_epochs = 25

    p_bernoulli = None
    augmentation = p_augmentation
    use_dropout = False

    aug_factor = 2
    num_neighbs = 5
    lim4sim = 2
    n_lat = int(num_corr/4)
    start= time.time()

    print('p_bernoulli: ', p_bernoulli)
    print('augmentaiton: ', augmentation, 'aug_factor: ', aug_factor, 
          'num_neighbs: ', num_neighbs, 'lim4sim: ', lim4sim)
    print('use_dropout: ', use_dropout)
    print('p_fold: ', p_fold, '\n')

    sim_function = functools.partial(cal_similarity, lim=lim4sim)
    crossval_res_kol=[]
    y_arr = np.array([get_label(f) for f in flist])
    flist = np.array(flist)
    kk = 0 

    for rp in range(1):
        kf = StratifiedKFold(n_splits=p_fold, random_state=1, shuffle=True)
        np.random.shuffle(flist)
        y_arr = np.array([get_label(f) for f in flist])

        for kk,(train_index, test_index) in enumerate(kf.split(flist, y_arr)):		
            train_samples, test_samples = flist[train_index], flist[test_index]
            verbose = (True if (kk == 0) else False)
            regions_inds = get_regs(train_samples,int(num_corr/4))
			
            num_inpp = len(regions_inds)
            n_lat = int(num_inpp/2)

            model = MTAutoEncoder(tied=True, num_inputs = num_inpp, num_latent = n_lat, use_dropout = use_dropout)
            criterion_clf = tf.keras.losses.BinaryCrossentropy(from_logits=True,reduction = tf.keras.losses.Reduction.SUM)
            criterion_ae = keras.losses.MeanSquaredError(reduction = "sum_over_batch_size")

            train_dataset = CCTOTAL(data = all_corr, samples_list = train_samples, 
                                    # batch_size = batch_size,
                                    augmentation = augmentation, aug_factor=aug_factor,# shuffle = True, 
                                    num_neighbs=num_neighbs, eig_data=eig_data, similarity_fn=sim_function, 
                                    verbose=verbose,regs=regions_inds)
									
            train_lo = getdata(train_loader = train_dataset , batch_size=batch_size , mode = 'Train')

            test_dataset =CCTOTAL(data = all_corr, samples_list=test_samples,  
                                  augmentation=False, 
                                  # batch_size = batch_size, 
                                   verbose=verbose,regs=regions_inds) 

            test_loader = getdata(train_loader = test_dataset , batch_size=batch_size , mode = 'test')                       
            
            train_losses = train(model,train_lo,20 ,batch_size, p_bernoulli , mode='both')
            
            train_losses = train(model,train_lo,5,batch_size ,p_bernoulli , mode='clf') 

            res_mlp = test(model,test_loader,criterion_ae,eval_classifier=True)
			
            print("##########################################################################")
            print("TEST LOSSES : ")
            print(res_mlp)
			
            crossval_res_kol.append(res_mlp)
        
        print("averages:")
        print(np.mean(np.array(crossval_res_kol),axis = 0))
        finish= time.time()
        print("passed time:")
        print(finish-start)
        